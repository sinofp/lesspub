// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Js_array = require("rescript/lib/js/js_array.js");
var Js_types = require("rescript/lib/js/js_types.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function classify(t) {
  var string = Js_types.classify(t);
  if (typeof string === "number") {
    return Pervasives.failwith("Unreachable code");
  }
  switch (string.TAG | 0) {
    case /* JSString */1 :
        return {
                TAG: /* String */0,
                _0: string._0
              };
    case /* JSObject */3 :
        return {
                TAG: /* Wrap */1,
                _0: string._0
              };
    default:
      return Pervasives.failwith("Unreachable code");
  }
}

var StringOption = {
  classify: classify
};

function getId(ooi) {
  var id = classify(ooi);
  if (id.TAG === /* String */0) {
    return id._0;
  } else {
    return id._0.id;
  }
}

function toJSON(o) {
  var match = Js_dict.get(o, "@context");
  if (match !== undefined) {
    
  } else {
    o["@context"] = "https://www.w3.org/ns/activitystreams";
  }
  return o;
}

function isJSONString(json) {
  var match = Js_json.classify(json);
  if (typeof match === "number" || match.TAG !== /* JSONString */0) {
    return false;
  } else {
    return true;
  }
}

function validateJSON(json) {
  var dict = Js_json.classify(json);
  if (typeof dict === "number") {
    return false;
  }
  if (dict.TAG !== /* JSONObject */2) {
    return false;
  }
  var dict$1 = dict._0;
  var id = Belt_Option.map(Js_dict.get(dict$1, "id"), isJSONString);
  var type_ = Belt_Option.map(Js_dict.get(dict$1, "type"), isJSONString);
  var obj = Belt_Option.map(Js_dict.get(dict$1, "object"), (function (x) {
          if (isJSONString(x)) {
            return true;
          } else {
            return validateJSON(x);
          }
        }));
  var orderedItems = Belt_Option.map(Belt_Option.flatMap(Js_dict.get(dict$1, "orderedItems"), Js_json.decodeArray), (function (param) {
          return Js_array.every((function (x) {
                        if (isJSONString(x)) {
                          return true;
                        } else {
                          return validateJSON(x);
                        }
                      }), param);
        }));
  if (id === undefined) {
    return false;
  }
  if (!id) {
    return false;
  }
  if (type_ === undefined) {
    return false;
  }
  if (!type_) {
    return false;
  }
  if (obj !== undefined && !obj) {
    return false;
  }
  if (orderedItems !== undefined && !orderedItems) {
    return false;
  } else {
    return true;
  }
}

function fromString(s) {
  var tmp;
  try {
    tmp = {
      TAG: /* Ok */0,
      _0: JSON.parse(s)
    };
  }
  catch (exn){
    tmp = {
      TAG: /* Error */1,
      _0: "Error parsing JSON string"
    };
  }
  return Belt_Result.flatMap(tmp, (function (x) {
                if (validateJSON(x)) {
                  return {
                          TAG: /* Ok */0,
                          _0: x
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: "JSON is not valid"
                        };
                }
              }));
}

function resultToOption(r) {
  return Belt_Result.mapWithDefault(r, undefined, (function (x) {
                return Caml_option.some(x);
              }));
}

exports.StringOption = StringOption;
exports.getId = getId;
exports.toJSON = toJSON;
exports.isJSONString = isJSONString;
exports.validateJSON = validateJSON;
exports.fromString = fromString;
exports.resultToOption = resultToOption;
/* No side effect */
