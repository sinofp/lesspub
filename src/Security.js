// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fetch from "./Fetch.js";
import * as Config from "./Config.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Nodecrypto from "node:crypto";

function get(text) {
  return Nodecrypto.createHash("sha256").update(text).digest("base64");
}

var Hash = {
  get: get
};

function sign(data) {
  return Nodecrypto.sign("sha256", Buffer.from(data), Config.privateKey).toString("base64");
}

function verify(data, publicKey, signature) {
  return Nodecrypto.verify("sha256", Buffer.from(data), publicKey, Buffer.from(signature, "base64"));
}

function verifyDigest($$event) {
  return Belt_Option.mapWithDefault(Js_dict.get($$event.headers, "digest"), false, (function (x) {
                return x === "SHA-256=" + get(Belt_Option.getWithDefault($$event.body, ""));
              }));
}

async function verifySignature($$event, keyId, headers, signature) {
  return Belt_Option.mapWithDefault(await Fetch.fetchKey(keyId), false, (function (publicKey) {
                var to_be_signed = headers.map(function (h) {
                        var match = Js_dict.get($$event.headers, h);
                        if (h === "(request-target)") {
                          return "(request-target): " + $$event.httpMethod.toLowerCase() + " " + $$event.path + "";
                        }
                        if (match !== undefined) {
                          return h + ": " + match;
                        }
                        throw {
                              RE_EXN_ID: "Match_failure",
                              _1: [
                                "Security.res",
                                42,
                                10
                              ],
                              Error: new Error()
                            };
                      }).join("\n");
                return verify(to_be_signed, publicKey, signature);
              }));
}

function parse(headers) {
  return Belt_Option.map(Js_dict.get(headers, "signature"), (function (s) {
                var dict = Js_dict.fromArray(s.split(",").map(function (x) {
                          var i = x.indexOf("=");
                          return [
                                  x.slice(0, i),
                                  x.slice(i + 2 | 0, x.length - 1 | 0)
                                ];
                        }));
                var keyId = Js_dict.get(dict, "keyId");
                var signature = Js_dict.get(dict, "signature");
                var algorithm = Js_dict.get(dict, "algorithm");
                var headers = Belt_Option.map(Js_dict.get(dict, "headers"), (function (s) {
                        return s.split(" ");
                      }));
                return [
                        keyId,
                        signature,
                        algorithm,
                        headers
                      ];
              }));
}

async function verify$1($$event) {
  var match = parse($$event.headers);
  if (match === undefined) {
    return false;
  }
  var keyId = match[0];
  if (keyId === undefined) {
    return false;
  }
  var signature = match[1];
  if (signature === undefined) {
    return false;
  }
  if (match[2] === undefined) {
    return false;
  }
  var headers = match[3];
  if (headers !== undefined && verifyDigest($$event)) {
    return await verifySignature($$event, keyId, headers, signature);
  } else {
    return false;
  }
}

var Signature = {
  verifyDigest: verifyDigest,
  verifySignature: verifySignature,
  parse: parse,
  verify: verify$1
};

export {
  Hash ,
  sign ,
  verify ,
  Signature ,
}
/* Fetch Not a pure module */
