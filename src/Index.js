// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Handle from "./Handle.js";
import * as $$Object from "./Object.js";
import * as Security from "./Security.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

async function handler($$event, param) {
  var httpMethod = $$event.httpMethod;
  var path = $$event.path;
  console.log({
        httpMethod: httpMethod,
        path: path,
        headers: $$event.headers
      });
  var post_verified = httpMethod === "POST" && await Security.Signature.verify($$event);
  console.log("post_verified:", post_verified);
  var activity = Belt_Option.map($$event.body, $$Object.fromString);
  Belt_Option.forEach(activity, (function (x) {
          if (x.TAG === /* Ok */0) {
            console.log("body:", x._0);
            return ;
          }
          console.log("Can't parse body as an ActivityStream Object:", x._0);
        }));
  var handlers = function (t) {
    if (t === "Accept" || t === "Note" || t === "OrderedCollection") {
      return function (param) {
        return Promise.resolve({
                    statusCode: 400,
                    body: "Why are you sending this to me?"
                  });
      };
    } else if (t === "Delete") {
      return Handle.$$delete;
    } else if (t === "Follow") {
      return Handle.follow;
    } else if (t === "Create") {
      return Handle.create;
    } else if (t === "Like") {
      return function (param) {
        return Handle.like(false, param);
      };
    } else if (t === "Undo") {
      return Handle.undo;
    } else {
      return function (param) {
        return Handle.announce(false, param);
      };
    }
  };
  if (httpMethod === "GET") {
    if (path === "/actor") {
      return Handle.actor($$event);
    } else {
      return {
              statusCode: 501
            };
    }
  }
  if (httpMethod !== "POST") {
    return {
            statusCode: 501
          };
  }
  if (!post_verified) {
    return {
            statusCode: 401
          };
  }
  if (path !== "/inbox") {
    return {
            statusCode: 501
          };
  }
  if (activity === undefined) {
    return {
            statusCode: 501
          };
  }
  if (activity.TAG !== /* Ok */0) {
    return {
            statusCode: 501
          };
  }
  var act = activity._0;
  return await handlers(act.type)(act);
}

export {
  handler ,
}
/* Handle Not a pure module */
