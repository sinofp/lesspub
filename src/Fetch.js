// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Config from "./Config.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as $$Object from "./Object.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import NodeFetch from "node-fetch";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var headers = {
  accept: "application/activity+json"
};

async function fetchKey(keyId) {
  var res = await NodeFetch(keyId, {
        headers: headers
      });
  try {
    return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Js_dict.get(await res.json(), "publicKey"), Js_json.decodeObject), (function (x) {
                      return Js_dict.get(x, "publicKeyPem");
                    })), Js_json.decodeString);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

async function fetchInbox(actor) {
  var res = await NodeFetch(actor, {
        headers: headers
      });
  try {
    return Belt_Option.flatMap(Js_dict.get(await res.json(), "inbox"), Js_json.decodeString);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

function atob(s) {
  return Buffer.from(s).toString("base64");
}

function btoa(s) {
  return Buffer.from(s, "base64").toString();
}

var headers$1 = {
  accept: "application/vnd.github+json",
  authorization: "Bearer " + Config.ghToken,
  "x-gitHub-api-version": "2022-11-28"
};

async function put(content, path, sha) {
  return (await NodeFetch(Config.ghBaseURL + path, {
                method: "PUT",
                headers: headers$1,
                body: JSON.stringify({
                      message: "Update ActivityPub file",
                      committer: {
                        name: "LessPub Bot",
                        email: "no-email@example.com"
                      },
                      content: Buffer.from(content).toString("base64"),
                      sha: sha
                    })
              })).ok;
}

async function $$delete(path, sha) {
  return (await NodeFetch(Config.ghBaseURL + path, {
                method: "DELETE",
                headers: headers$1,
                body: JSON.stringify({
                      message: "Delete ActivityPub file",
                      committer: {
                        name: "LessPub Bot",
                        email: "no-email@example.com"
                      },
                      sha: sha
                    })
              })).ok;
}

async function get(path) {
  var res = await NodeFetch(Config.ghBaseURL + path, {
        headers: headers$1
      });
  if (!res.ok) {
    return [
            undefined,
            undefined
          ];
  }
  var dict = await res.json();
  var content = Belt_Option.map(Belt_Option.flatMap(Js_dict.get(dict, "content"), Js_json.decodeString), btoa);
  var sha = Belt_Option.flatMap(Js_dict.get(dict, "sha"), Js_json.decodeString);
  return [
          content,
          sha
        ];
}

async function insertToFile(ooi, path) {
  var match = await get(path);
  var collection = Belt_Option.getWithDefault(Belt_Option.flatMap(match[0], (function (x) {
              return $$Object.resultToOption($$Object.fromString(x));
            })), {
        id: Config.baseURL + path,
        type: "OrderedCollection",
        totalItems: 0,
        orderedItems: []
      });
  var totalItems = collection.totalItems;
  if (totalItems !== undefined) {
    var orderedItems = collection.orderedItems;
    if (orderedItems !== undefined) {
      if (orderedItems.includes(ooi)) {
        return true;
      } else {
        collection.totalItems = 1 + totalItems | 0;
        collection.orderedItems = [ooi].concat(orderedItems);
        return await put(JSON.stringify($$Object.toJSON(collection)), path, match[1]);
      }
    }
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Fetch.res",
            103,
            4
          ],
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "Fetch.res",
          103,
          4
        ],
        Error: new Error()
      };
}

async function removeFromFile(ooi, path) {
  var match = await get(path);
  var sha = match[1];
  var collection = Belt_Option.flatMap(match[0], (function (x) {
          return $$Object.resultToOption($$Object.fromString(x));
        }));
  if (collection === undefined) {
    return true;
  }
  var collection$1 = Caml_option.valFromOption(collection);
  var totalItems = collection$1.totalItems;
  if (totalItems !== undefined) {
    var orderedItems = collection$1.orderedItems;
    if (orderedItems !== undefined) {
      var id = $$Object.getId(ooi);
      console.log(totalItems, sha, id);
      var match$1 = orderedItems.findIndex(function (x) {
            return id === $$Object.getId(x);
          });
      if (match$1 !== -1) {
        if (totalItems !== 1) {
          orderedItems.splice(match$1, 1);
          collection$1.totalItems = totalItems - 1 | 0;
          collection$1.orderedItems = orderedItems;
          return await put(JSON.stringify($$Object.toJSON(collection$1)), path, sha);
        } else {
          return await $$delete(path, Belt_Option.getExn(sha));
        }
      } else {
        return true;
      }
    }
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Fetch.res",
            116,
            8
          ],
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "Fetch.res",
          116,
          8
        ],
        Error: new Error()
      };
}

var GitHub = {
  atob: atob,
  btoa: btoa,
  headers: headers$1,
  put: put,
  $$delete: $$delete,
  get: get,
  insertToFile: insertToFile,
  removeFromFile: removeFromFile
};

export {
  headers ,
  fetchKey ,
  fetchInbox ,
  GitHub ,
}
/* Config Not a pure module */
